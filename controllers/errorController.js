/* eslint-disable node/no-unsupported-features/es-syntax */
// In development this error will be sent
const AppError = require('../utils/appError');

const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value}`;
  return new AppError(message, 400); ///400 - bad request
};

const handleDuplicateFieldDB = (err) => {
  const value = err.keyValue;
  // console.log(value.name);
  const message = `Duplicate Field Vaue: ${value.name}. Please use another`;
  return new AppError(message, 400); ///400 - bad request
};

const handleValidatorErrorDB = (err) => {
  // we will have all errors as object so we are iterating through each object and return =ing only each object's message
  // it will return array
  const errors = Object.values(err.errors).map((el) => el.message);
  // console.log(errors);
  // we are printing all elements in same line
  const message = `Invalid Input data. ${errors.join('. ')}`;
  return new AppError(message, 400); ///400 - bad request
};

const handleJWTError = () =>
  new AppError('Invalid token. Please login again !', 401);

const handleJWTExpiredError = () =>
  new AppError('Your token has been expired. Please login again !', 401);

const sendErrorDev = (err, req, res) => {
  // API
  // req.orginalUrl to get the url withour localhost
  // if else is not for api it is fr rendering website
  // in rendered website there will not be api in url so whenever there is no api in url we will be rendering error page
  if (req.originalUrl.startsWith('/api')) {
    res.status(err.statusCode).json({
      status: err.status,
      err: err,
      message: err.message,
      stack: err.stack,
    });
  } else {
    // RENDERED WEBSITE
    console.log('you found me');
    res.status(err.statusCode).render('error', {
      title: 'Something went wrong!',
      msg: err.message,
    });
  }
};

const sendErrorProd = (err, req, res) => {
  // ------------------API------------------
  if (req.originalUrl.startsWith('/api')) {
    // Operational, trusted error: send message to client
    if (err.isOperational) {
      return res.status(err.statusCode).json({
        status: err.status,
        message: err.message,
      });

      // Programming or other unknown errors: don't leak error details
    }
    // 1. ) Log error
    console.log('ErrorðŸ’¥', err);

    // 2.) Send generic message
    return res.status(err.statusCode).json({
      status: 'error',
      message: 'Something went very wrong!',
    });

    // we have to send the error message in prod onl if it is isOperational = true that we set using our class
    // otherwise we have to send a generic error
    // we developer need to know what kind of error had occured so console it
  }

  // -------------------RENDERED WEBSITE-------------------
  console.log('ErrorðŸ’¥', err);
  // 1.if it is perational error then we can send err.message to client
  if (err.isOperational) {
    res.status(err.statusCode).render('error', {
      title: 'Something went wrong!',
      msg: err.message, // generic message in production
    });

    // 2.Programming or other unknown errors: don't leak error details
  } else {
    // console.log('you found me');
    res.status(err.statusCode).render('error', {
      title: 'Something went wrong!',
      msg: 'Please try again later', // generic message in production
    });
  }
};

// handling invalid id's

module.exports = (err, req, res, next) => {
  // There is two type one 4 strarting error like 400,404, these are failed
  // Another is 500 error that is internal server error
  // if (err === 'CastError') {
  //   console.log('hi');
  // }
  // console.log(err.stack.includes('CastError'));
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';
  // res.status(err.statusCode).json({
  //   status: err.status,
  //   message: err.message, //no need to initiaize message because we directly passing like new Error('meaasage')
  // });

  // we should not send error like this
  // Because in production mode we dont want to leak error to user
  // so
  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, req, res);
  } else if (process.env.NODE_ENV === 'production') {
    // 1.Handling ib=nvalid db ID'S like api/tours/wwwwww

    // We dont want to modify in our original err
    let error = { ...err };
    console.log(err.name);
    if (err.name === 'CastError') {
      error = handleCastErrorDB(error);
      sendErrorProd(error, req, res);

      // Suppose user enter a same value of name it will return error because we set it has unique
      // it has no name because it is generated by mongo driver
      // so we are using its code
    } else if (err.code === 11000) {
      error = handleDuplicateFieldDB(error);
      sendErrorProd(error, req, res);

      // Suppose if we enter the tour name less than 10 charcaters then it is validation error as we mentioned it
      // we are handling it has belows
    } else if (err.name === 'ValidationError') {
      error = handleValidatorErrorDB(error);
      sendErrorProd(error, req, res);
    } else if (err.name === 'JsonWebTokenError') {
      error = handleJWTError();
      sendErrorProd(error, req, res);
    } else if (err.name === 'TokenExpiredError') {
      error = handleJWTExpiredError();
      sendErrorProd(error, req, res);
    } else {
      sendErrorProd(err, req, res);
    }
  }
};
